'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var formatDay = function formatDay(time) {
    var daySplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';

    time = time.length < 13 ? Number.parseInt(time) * 1000 : Number.parseInt(time);
    var date = new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
    return '' + year + daySplit + month + daySplit + day;
};
var formatSecond = function formatSecond(time) {
    var daySplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
    var timeSplit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';

    var date = new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
    var hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
    var min = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
    var sec = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();
    return '' + year + daySplit + month + daySplit + day + ' ' + hour + timeSplit + min + timeSplit + sec;
};
var formatTime = function formatTime(time) {
    var date = new Date(time);
    var cur = new Date().setHours(0, 0, 0, 0);
    if (date.getTime() >= cur) {
        var min = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
        return date.getHours() + ':' + min;
    } else {
        return date.getMonth() + 1 + '\u6708' + date.getDate() + '\u65E5';
    }
};

exports.formatDay = formatDay;
exports.formatSecond = formatSecond;
exports.formatTime = formatTime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdFRpbWUuanMiXSwibmFtZXMiOlsiZm9ybWF0RGF5IiwidGltZSIsImRheVNwbGl0IiwibGVuZ3RoIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJkYXRlIiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJkYXkiLCJnZXREYXRlIiwiZm9ybWF0U2Vjb25kIiwidGltZVNwbGl0IiwiaG91ciIsImdldEhvdXJzIiwibWluIiwiZ2V0TWludXRlcyIsInNlYyIsImdldFNlY29uZHMiLCJmb3JtYXRUaW1lIiwiY3VyIiwic2V0SG91cnMiLCJnZXRUaW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFlBQVksU0FBWkEsU0FBWSxDQUFDQyxJQUFELEVBQTBCO0FBQUEsUUFBbkJDLFFBQW1CLHVFQUFSLEdBQVE7O0FBQ3RDRCxXQUFPQSxLQUFLRSxNQUFMLEdBQWMsRUFBZCxHQUFtQkMsT0FBT0MsUUFBUCxDQUFnQkosSUFBaEIsSUFBd0IsSUFBM0MsR0FBa0RHLE9BQU9DLFFBQVAsQ0FBZ0JKLElBQWhCLENBQXpEO0FBQ0EsUUFBSUssT0FBTyxJQUFJQyxJQUFKLENBQVNOLElBQVQsQ0FBWDtBQUNBLFFBQUlPLE9BQU9GLEtBQUtHLFdBQUwsRUFBWDtBQUNBLFFBQUlDLFFBQVFKLEtBQUtLLFFBQUwsS0FBa0IsQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsT0FBT0wsS0FBS0ssUUFBTCxLQUFrQixDQUF6QixDQUEzQixHQUF5REwsS0FBS0ssUUFBTCxLQUFrQixDQUF2RjtBQUNBLFFBQUlDLE1BQU1OLEtBQUtPLE9BQUwsS0FBaUIsRUFBakIsR0FBc0IsTUFBT1AsS0FBS08sT0FBTCxFQUE3QixHQUErQ1AsS0FBS08sT0FBTCxFQUF6RDtBQUNBLGdCQUFVTCxJQUFWLEdBQWlCTixRQUFqQixHQUE0QlEsS0FBNUIsR0FBb0NSLFFBQXBDLEdBQStDVSxHQUEvQztBQUNILENBUEQ7QUFRQSxJQUFJRSxlQUFlLFNBQWZBLFlBQWUsQ0FBQ2IsSUFBRCxFQUEyQztBQUFBLFFBQXBDQyxRQUFvQyx1RUFBekIsR0FBeUI7QUFBQSxRQUFwQmEsU0FBb0IsdUVBQVIsR0FBUTs7QUFDMUQsUUFBSVQsT0FBTyxJQUFJQyxJQUFKLENBQVNOLElBQVQsQ0FBWDtBQUNBLFFBQUlPLE9BQU9GLEtBQUtHLFdBQUwsRUFBWDtBQUNBLFFBQUlDLFFBQVFKLEtBQUtLLFFBQUwsS0FBa0IsQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsT0FBT0wsS0FBS0ssUUFBTCxLQUFrQixDQUF6QixDQUEzQixHQUF5REwsS0FBS0ssUUFBTCxLQUFrQixDQUF2RjtBQUNBLFFBQUlDLE1BQU1OLEtBQUtPLE9BQUwsS0FBaUIsRUFBakIsR0FBc0IsTUFBT1AsS0FBS08sT0FBTCxFQUE3QixHQUErQ1AsS0FBS08sT0FBTCxFQUF6RDtBQUNBLFFBQUlHLE9BQU9WLEtBQUtXLFFBQUwsS0FBa0IsRUFBbEIsR0FBdUIsTUFBTVgsS0FBS1csUUFBTCxFQUE3QixHQUErQ1gsS0FBS1csUUFBTCxFQUExRDtBQUNBLFFBQUlDLE1BQU1aLEtBQUthLFVBQUwsS0FBb0IsRUFBcEIsR0FBeUIsTUFBTWIsS0FBS2EsVUFBTCxFQUEvQixHQUFtRGIsS0FBS2EsVUFBTCxFQUE3RDtBQUNBLFFBQUlDLE1BQU1kLEtBQUtlLFVBQUwsS0FBb0IsRUFBcEIsR0FBeUIsTUFBTWYsS0FBS2UsVUFBTCxFQUEvQixHQUFtRGYsS0FBS2UsVUFBTCxFQUE3RDtBQUNBLGdCQUFVYixJQUFWLEdBQWlCTixRQUFqQixHQUE0QlEsS0FBNUIsR0FBb0NSLFFBQXBDLEdBQStDVSxHQUEvQyxTQUFzREksSUFBdEQsR0FBNkRELFNBQTdELEdBQXlFRyxHQUF6RSxHQUErRUgsU0FBL0UsR0FBMkZLLEdBQTNGO0FBQ0gsQ0FURDtBQVVBLElBQUlFLGFBQWEsU0FBYkEsVUFBYSxDQUFDckIsSUFBRCxFQUFVO0FBQ3ZCLFFBQUlLLE9BQU8sSUFBSUMsSUFBSixDQUFTTixJQUFULENBQVg7QUFDQSxRQUFJc0IsTUFBTSxJQUFJaEIsSUFBSixHQUFXaUIsUUFBWCxDQUFvQixDQUFwQixFQUF1QixDQUF2QixFQUEwQixDQUExQixFQUE2QixDQUE3QixDQUFWO0FBQ0EsUUFBSWxCLEtBQUttQixPQUFMLE1BQWtCRixHQUF0QixFQUEyQjtBQUN2QixZQUFJTCxNQUFNWixLQUFLYSxVQUFMLEtBQW9CLEVBQXBCLEdBQXlCLE1BQU1iLEtBQUthLFVBQUwsRUFBL0IsR0FBbURiLEtBQUthLFVBQUwsRUFBN0Q7QUFDQSxlQUFVYixLQUFLVyxRQUFMLEVBQVYsU0FBNkJDLEdBQTdCO0FBQ0gsS0FIRCxNQUdPO0FBQ0gsZUFBVVosS0FBS0ssUUFBTCxLQUFrQixDQUE1QixjQUFpQ0wsS0FBS08sT0FBTCxFQUFqQztBQUNIO0FBQ0osQ0FURDs7UUFXUWIsUyxHQUFBQSxTO1FBQVdjLFksR0FBQUEsWTtRQUFjUSxVLEdBQUFBLFUiLCJmaWxlIjoiZm9ybWF0VGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBmb3JtYXREYXkgPSAodGltZSwgZGF5U3BsaXQgPSAnLScpID0+IHtcclxuICAgIHRpbWUgPSB0aW1lLmxlbmd0aCA8IDEzID8gTnVtYmVyLnBhcnNlSW50KHRpbWUpICogMTAwMCA6IE51bWJlci5wYXJzZUludCh0aW1lKVxyXG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lKVxyXG4gICAgbGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKClcclxuICAgIGxldCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDEgPCAxMCA/ICcwJyArIChkYXRlLmdldE1vbnRoKCkgKyAxKSA6IGRhdGUuZ2V0TW9udGgoKSArIDFcclxuICAgIGxldCBkYXkgPSBkYXRlLmdldERhdGUoKSA8IDEwID8gJzAnICsgKGRhdGUuZ2V0RGF0ZSgpKSA6IGRhdGUuZ2V0RGF0ZSgpXHJcbiAgICByZXR1cm4gYCR7eWVhcn0ke2RheVNwbGl0fSR7bW9udGh9JHtkYXlTcGxpdH0ke2RheX1gXHJcbn1cclxubGV0IGZvcm1hdFNlY29uZCA9ICh0aW1lLCBkYXlTcGxpdCA9ICctJywgdGltZVNwbGl0ID0gJzonKSA9PiB7XHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpXHJcbiAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxyXG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMSA8IDEwID8gJzAnICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpIDogZGF0ZS5nZXRNb250aCgpICsgMVxyXG4gICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyAoZGF0ZS5nZXREYXRlKCkpIDogZGF0ZS5nZXREYXRlKClcclxuICAgIGxldCBob3VyID0gZGF0ZS5nZXRIb3VycygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKClcclxuICAgIGxldCBtaW4gPSBkYXRlLmdldE1pbnV0ZXMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRNaW51dGVzKCkgOiBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgbGV0IHNlYyA9IGRhdGUuZ2V0U2Vjb25kcygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldFNlY29uZHMoKSA6IGRhdGUuZ2V0U2Vjb25kcygpXHJcbiAgICByZXR1cm4gYCR7eWVhcn0ke2RheVNwbGl0fSR7bW9udGh9JHtkYXlTcGxpdH0ke2RheX0gJHtob3VyfSR7dGltZVNwbGl0fSR7bWlufSR7dGltZVNwbGl0fSR7c2VjfWBcclxufVxyXG5sZXQgZm9ybWF0VGltZSA9ICh0aW1lKSA9PiB7XHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpXHJcbiAgICBsZXQgY3VyID0gbmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKVxyXG4gICAgaWYgKGRhdGUuZ2V0VGltZSgpID49IGN1cikge1xyXG4gICAgICAgIGxldCBtaW4gPSBkYXRlLmdldE1pbnV0ZXMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRNaW51dGVzKCkgOiBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgICAgIHJldHVybiBgJHtkYXRlLmdldEhvdXJzKCl9OiR7bWlufWBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2RhdGUuZ2V0TW9udGgoKSArIDF95pyIJHtkYXRlLmdldERhdGUoKX3ml6VgXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7Zm9ybWF0RGF5LCBmb3JtYXRTZWNvbmQsIGZvcm1hdFRpbWV9XHJcbiJdfQ==