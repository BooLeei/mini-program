'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var formatDay = function formatDay(time) {
    var daySplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';

    time = time.length < 13 ? Number.parseInt(time) * 1000 : Number.parseInt(time);
    var date = new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
    return '' + year + daySplit + month + daySplit + day;
};
var formatSecond = function formatSecond(time) {
    var daySplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
    var timeSplit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';

    var date = new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
    var hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
    var min = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
    var sec = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();
    return '' + year + daySplit + month + daySplit + day + ' ' + hour + timeSplit + min + timeSplit + sec;
};
var formatTime = function formatTime(time) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var date = new Date(time);
    var cur = new Date().setHours(0, 0, 0, 0);
    if (date.getTime() >= cur) {
        var min = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
        return date.getHours() + ':' + min;
    } else {
        if (Number.parseInt(type) === 1) {
            return date.getMonth() + 1 + '\u6708' + date.getDate() + '\u65E5';
        } else {
            return date.getFullYear() + '\u5E74' + (date.getMonth() + 1) + '\u6708' + date.getDate() + '\u65E5';
        }
    }
};

exports.formatDay = formatDay;
exports.formatSecond = formatSecond;
exports.formatTime = formatTime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdFRpbWUuanMiXSwibmFtZXMiOlsiZm9ybWF0RGF5IiwidGltZSIsImRheVNwbGl0IiwibGVuZ3RoIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJkYXRlIiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJkYXkiLCJnZXREYXRlIiwiZm9ybWF0U2Vjb25kIiwidGltZVNwbGl0IiwiaG91ciIsImdldEhvdXJzIiwibWluIiwiZ2V0TWludXRlcyIsInNlYyIsImdldFNlY29uZHMiLCJmb3JtYXRUaW1lIiwidHlwZSIsImN1ciIsInNldEhvdXJzIiwiZ2V0VGltZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxZQUFZLFNBQVpBLFNBQVksQ0FBQ0MsSUFBRCxFQUEwQjtBQUFBLFFBQW5CQyxRQUFtQix1RUFBUixHQUFROztBQUN0Q0QsV0FBT0EsS0FBS0UsTUFBTCxHQUFjLEVBQWQsR0FBbUJDLE9BQU9DLFFBQVAsQ0FBZ0JKLElBQWhCLElBQXdCLElBQTNDLEdBQWtERyxPQUFPQyxRQUFQLENBQWdCSixJQUFoQixDQUF6RDtBQUNBLFFBQUlLLE9BQU8sSUFBSUMsSUFBSixDQUFTTixJQUFULENBQVg7QUFDQSxRQUFJTyxPQUFPRixLQUFLRyxXQUFMLEVBQVg7QUFDQSxRQUFJQyxRQUFRSixLQUFLSyxRQUFMLEtBQWtCLENBQWxCLEdBQXNCLEVBQXRCLEdBQTJCLE9BQU9MLEtBQUtLLFFBQUwsS0FBa0IsQ0FBekIsQ0FBM0IsR0FBeURMLEtBQUtLLFFBQUwsS0FBa0IsQ0FBdkY7QUFDQSxRQUFJQyxNQUFNTixLQUFLTyxPQUFMLEtBQWlCLEVBQWpCLEdBQXNCLE1BQU9QLEtBQUtPLE9BQUwsRUFBN0IsR0FBK0NQLEtBQUtPLE9BQUwsRUFBekQ7QUFDQSxnQkFBVUwsSUFBVixHQUFpQk4sUUFBakIsR0FBNEJRLEtBQTVCLEdBQW9DUixRQUFwQyxHQUErQ1UsR0FBL0M7QUFDSCxDQVBEO0FBUUEsSUFBSUUsZUFBZSxTQUFmQSxZQUFlLENBQUNiLElBQUQsRUFBMkM7QUFBQSxRQUFwQ0MsUUFBb0MsdUVBQXpCLEdBQXlCO0FBQUEsUUFBcEJhLFNBQW9CLHVFQUFSLEdBQVE7O0FBQzFELFFBQUlULE9BQU8sSUFBSUMsSUFBSixDQUFTTixJQUFULENBQVg7QUFDQSxRQUFJTyxPQUFPRixLQUFLRyxXQUFMLEVBQVg7QUFDQSxRQUFJQyxRQUFRSixLQUFLSyxRQUFMLEtBQWtCLENBQWxCLEdBQXNCLEVBQXRCLEdBQTJCLE9BQU9MLEtBQUtLLFFBQUwsS0FBa0IsQ0FBekIsQ0FBM0IsR0FBeURMLEtBQUtLLFFBQUwsS0FBa0IsQ0FBdkY7QUFDQSxRQUFJQyxNQUFNTixLQUFLTyxPQUFMLEtBQWlCLEVBQWpCLEdBQXNCLE1BQU9QLEtBQUtPLE9BQUwsRUFBN0IsR0FBK0NQLEtBQUtPLE9BQUwsRUFBekQ7QUFDQSxRQUFJRyxPQUFPVixLQUFLVyxRQUFMLEtBQWtCLEVBQWxCLEdBQXVCLE1BQU1YLEtBQUtXLFFBQUwsRUFBN0IsR0FBK0NYLEtBQUtXLFFBQUwsRUFBMUQ7QUFDQSxRQUFJQyxNQUFNWixLQUFLYSxVQUFMLEtBQW9CLEVBQXBCLEdBQXlCLE1BQU1iLEtBQUthLFVBQUwsRUFBL0IsR0FBbURiLEtBQUthLFVBQUwsRUFBN0Q7QUFDQSxRQUFJQyxNQUFNZCxLQUFLZSxVQUFMLEtBQW9CLEVBQXBCLEdBQXlCLE1BQU1mLEtBQUtlLFVBQUwsRUFBL0IsR0FBbURmLEtBQUtlLFVBQUwsRUFBN0Q7QUFDQSxnQkFBVWIsSUFBVixHQUFpQk4sUUFBakIsR0FBNEJRLEtBQTVCLEdBQW9DUixRQUFwQyxHQUErQ1UsR0FBL0MsU0FBc0RJLElBQXRELEdBQTZERCxTQUE3RCxHQUF5RUcsR0FBekUsR0FBK0VILFNBQS9FLEdBQTJGSyxHQUEzRjtBQUNILENBVEQ7QUFVQSxJQUFJRSxhQUFhLFNBQWJBLFVBQWEsQ0FBQ3JCLElBQUQsRUFBb0I7QUFBQSxRQUFic0IsSUFBYSx1RUFBTixDQUFNOztBQUNqQyxRQUFJakIsT0FBTyxJQUFJQyxJQUFKLENBQVNOLElBQVQsQ0FBWDtBQUNBLFFBQUl1QixNQUFNLElBQUlqQixJQUFKLEdBQVdrQixRQUFYLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLEVBQTBCLENBQTFCLEVBQTZCLENBQTdCLENBQVY7QUFDQSxRQUFJbkIsS0FBS29CLE9BQUwsTUFBa0JGLEdBQXRCLEVBQTJCO0FBQ3ZCLFlBQUlOLE1BQU1aLEtBQUthLFVBQUwsS0FBb0IsRUFBcEIsR0FBeUIsTUFBTWIsS0FBS2EsVUFBTCxFQUEvQixHQUFtRGIsS0FBS2EsVUFBTCxFQUE3RDtBQUNBLGVBQVViLEtBQUtXLFFBQUwsRUFBVixTQUE2QkMsR0FBN0I7QUFDSCxLQUhELE1BR087QUFDSCxZQUFJZCxPQUFPQyxRQUFQLENBQWdCa0IsSUFBaEIsTUFBMEIsQ0FBOUIsRUFBaUM7QUFDN0IsbUJBQVVqQixLQUFLSyxRQUFMLEtBQWtCLENBQTVCLGNBQWlDTCxLQUFLTyxPQUFMLEVBQWpDO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsbUJBQVVQLEtBQUtHLFdBQUwsRUFBVixlQUFnQ0gsS0FBS0ssUUFBTCxLQUFrQixDQUFsRCxlQUF1REwsS0FBS08sT0FBTCxFQUF2RDtBQUNIO0FBQ0o7QUFDSixDQWJEOztRQWVRYixTLEdBQUFBLFM7UUFBV2MsWSxHQUFBQSxZO1FBQWNRLFUsR0FBQUEsVSIsImZpbGUiOiJmb3JtYXRUaW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGZvcm1hdERheSA9ICh0aW1lLCBkYXlTcGxpdCA9ICctJykgPT4ge1xyXG4gICAgdGltZSA9IHRpbWUubGVuZ3RoIDwgMTMgPyBOdW1iZXIucGFyc2VJbnQodGltZSkgKiAxMDAwIDogTnVtYmVyLnBhcnNlSW50KHRpbWUpXHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpXHJcbiAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxyXG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMSA8IDEwID8gJzAnICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpIDogZGF0ZS5nZXRNb250aCgpICsgMVxyXG4gICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyAoZGF0ZS5nZXREYXRlKCkpIDogZGF0ZS5nZXREYXRlKClcclxuICAgIHJldHVybiBgJHt5ZWFyfSR7ZGF5U3BsaXR9JHttb250aH0ke2RheVNwbGl0fSR7ZGF5fWBcclxufVxyXG5sZXQgZm9ybWF0U2Vjb25kID0gKHRpbWUsIGRheVNwbGl0ID0gJy0nLCB0aW1lU3BsaXQgPSAnOicpID0+IHtcclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUodGltZSlcclxuICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXHJcbiAgICBsZXQgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxIDwgMTAgPyAnMCcgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkgOiBkYXRlLmdldE1vbnRoKCkgKyAxXHJcbiAgICBsZXQgZGF5ID0gZGF0ZS5nZXREYXRlKCkgPCAxMCA/ICcwJyArIChkYXRlLmdldERhdGUoKSkgOiBkYXRlLmdldERhdGUoKVxyXG4gICAgbGV0IGhvdXIgPSBkYXRlLmdldEhvdXJzKCkgPCAxMCA/ICcwJyArIGRhdGUuZ2V0SG91cnMoKSA6IGRhdGUuZ2V0SG91cnMoKVxyXG4gICAgbGV0IG1pbiA9IGRhdGUuZ2V0TWludXRlcygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldE1pbnV0ZXMoKSA6IGRhdGUuZ2V0TWludXRlcygpXHJcbiAgICBsZXQgc2VjID0gZGF0ZS5nZXRTZWNvbmRzKCkgPCAxMCA/ICcwJyArIGRhdGUuZ2V0U2Vjb25kcygpIDogZGF0ZS5nZXRTZWNvbmRzKClcclxuICAgIHJldHVybiBgJHt5ZWFyfSR7ZGF5U3BsaXR9JHttb250aH0ke2RheVNwbGl0fSR7ZGF5fSAke2hvdXJ9JHt0aW1lU3BsaXR9JHttaW59JHt0aW1lU3BsaXR9JHtzZWN9YFxyXG59XHJcbmxldCBmb3JtYXRUaW1lID0gKHRpbWUsIHR5cGUgPSAxKSA9PiB7XHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpXHJcbiAgICBsZXQgY3VyID0gbmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKVxyXG4gICAgaWYgKGRhdGUuZ2V0VGltZSgpID49IGN1cikge1xyXG4gICAgICAgIGxldCBtaW4gPSBkYXRlLmdldE1pbnV0ZXMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRNaW51dGVzKCkgOiBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgICAgIHJldHVybiBgJHtkYXRlLmdldEhvdXJzKCl9OiR7bWlufWBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKE51bWJlci5wYXJzZUludCh0eXBlKSA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0ZS5nZXRNb250aCgpICsgMX3mnIgke2RhdGUuZ2V0RGF0ZSgpfeaXpWBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfeW5tCR7ZGF0ZS5nZXRNb250aCgpICsgMX3mnIgke2RhdGUuZ2V0RGF0ZSgpfeaXpWBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7Zm9ybWF0RGF5LCBmb3JtYXRTZWNvbmQsIGZvcm1hdFRpbWV9XHJcbiJdfQ==